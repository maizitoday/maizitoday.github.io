<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>多线程和高并发 on </title>
    <link>http://maizitoday.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%AB%98%E5%B9%B6%E5%8F%91/</link>
    <description>Recent content in 多线程和高并发 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://maizitoday.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%AB%98%E5%B9%B6%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>线程池类</title>
      <link>http://maizitoday.github.io/post/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%B1%BB/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%B1%BB/</guid>
      <description>[TOC] Executor框架 转载地址：https://blog.csdn.net/tongdanping/article/details/7960</description>
    </item>
    
    <item>
      <title>并发类</title>
      <link>http://maizitoday.github.io/post/%E5%B9%B6%E5%8F%91%E7%B1%BB/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E5%B9%B6%E5%8F%91%E7%B1%BB/</guid>
      <description>[TOC] happens-before 转载地址：https://blog.csdn.net/hxm_Code/article/details/102481204 虽然jvm和执</description>
    </item>
    
    <item>
      <title>原子类</title>
      <link>http://maizitoday.github.io/post/%E5%8E%9F%E5%AD%90%E7%B1%BB/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E5%8E%9F%E5%AD%90%E7%B1%BB/</guid>
      <description>[TOC] 什么是原子性 原子操作是不可分割的。（我们要站在多线程的角度）指访问某个共享变量的操作从其执行线程之外的线程来看，该操作要么已经执行完毕，要</description>
    </item>
    
    <item>
      <title>Active-Object-设计模式</title>
      <link>http://maizitoday.github.io/post/active-object-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/active-object-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC]</description>
    </item>
    
    <item>
      <title>Count-Down-设计模式</title>
      <link>http://maizitoday.github.io/post/count-down-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/count-down-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://blog.csdn.net/weixin_40288381/article/details/87474970 概述</description>
    </item>
    
    <item>
      <title>Thread-Per-Message-设计模式</title>
      <link>http://maizitoday.github.io/post/thread-per-message-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/thread-per-message-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://blog.csdn.net/qq_33366098/article/details/89183926 概述 Thre</description>
    </item>
    
    <item>
      <title>Two-phase-Termination-设计模式</title>
      <link>http://maizitoday.github.io/post/two-phase-termination-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/two-phase-termination-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://blog.csdn.net/crazyzxljing0621/article/details/56669649 概</description>
    </item>
    
    <item>
      <title>Work-Thread-设计模式</title>
      <link>http://maizitoday.github.io/post/work-thread-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/work-thread-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载：https://blog.csdn.net/weixin_33997389/article/details/88809045 概述 Work T</description>
    </item>
    
    <item>
      <title>Future-设计模式</title>
      <link>http://maizitoday.github.io/post/future-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/future-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://www.cnblogs.com/liang1101/p/6476698.html Future模式 Future模式</description>
    </item>
    
    <item>
      <title>Guarded-Suspension-设计模式</title>
      <link>http://maizitoday.github.io/post/guarded-suspension-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/guarded-suspension-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://blog.csdn.net/weixin_42245930/article/details/88761176 Guarded Suspension</description>
    </item>
    
    <item>
      <title>ThreadLocal-设计模式</title>
      <link>http://maizitoday.github.io/post/threadlocal-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/threadlocal-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://blog.csdn.net/pingpangkuangmo/article/details/84654393 Th</description>
    </item>
    
    <item>
      <title>balking-设计模式</title>
      <link>http://maizitoday.github.io/post/balking-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/balking-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://blog.csdn.net/huangxun08/article/details/47081515 balking</description>
    </item>
    
    <item>
      <title>immutable-设计模式</title>
      <link>http://maizitoday.github.io/post/immutable-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/immutable-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://blog.csdn.net/liuxiao723846/article/details/48438437 immutable Objects immutable O</description>
    </item>
    
    <item>
      <title>各框架在并发情况下实例对象</title>
      <link>http://maizitoday.github.io/post/%E5%90%84%E6%A1%86%E6%9E%B6%E5%9C%A8%E5%B9%B6%E5%8F%91%E6%83%85%E5%86%B5%E4%B8%8B%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E5%90%84%E6%A1%86%E6%9E%B6%E5%9C%A8%E5%B9%B6%E5%8F%91%E6%83%85%E5%86%B5%E4%B8%8B%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1/</guid>
      <description>[TOC] servlet 原文链接：https://blog.csdn.net/hym740639005/article/details/81278258 因为se</description>
    </item>
    
    <item>
      <title>读写锁分离-设计模式</title>
      <link>http://maizitoday.github.io/post/%E8%AF%BB%E5%86%99%E9%94%81%E5%88%86%E7%A6%BB-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E8%AF%BB%E5%86%99%E9%94%81%E5%88%86%E7%A6%BB-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址： https://blog.csdn.net/weixin_39715061/article/details/81081008 需求简明分析 读的时候有好几个线程一起去读它 并行的去读,不会对下一个产生问题。 如果有人在写 你就不能读了 线程就会wait住 ，如果有</description>
    </item>
    
    <item>
      <title>单线程执行-设计模式</title>
      <link>http://maizitoday.github.io/post/%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://blog.csdn.net/weixin_39715061/article/details/81065182 模拟</description>
    </item>
    
    <item>
      <title>死锁</title>
      <link>http://maizitoday.github.io/post/%E6%AD%BB%E9%94%81/</link>
      <pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E6%AD%BB%E9%94%81/</guid>
      <description>[TOC] 线程死锁 代码显示 public class DealLock implements Runnable { private Object Alock = new Object(); private Object Block = new Object(); @Override public void run() { String name = Thread.currentThread().getName(); if (&amp;quot;A&amp;quot;.equals(name)) { a(); } else { b(); } } public void a() { synchronized (Alock) { System.out.printl</description>
    </item>
    
    <item>
      <title>自定义线程池</title>
      <link>http://maizitoday.github.io/post/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>[TOC] 转载地址：https://www.jianshu.com/p/6130557eccfb BlockingQueue（自定义阻塞队列） 这个类通</description>
    </item>
    
    <item>
      <title>多线程基础</title>
      <link>http://maizitoday.github.io/post/%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 16 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</guid>
      <description>[TOC] 进程， 线程， 协程 转载地址：https://www.cnblogs.com/williamjie/p/11195069.html 进程 进程是具</description>
    </item>
    
  </channel>
</rss>