<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on </title>
    <link>http://maizitoday.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://maizitoday.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>拦截过滤器模式</title>
      <link>http://maizitoday.github.io/post/%E6%8B%A6%E6%88%AA%E8%BF%87%E6%BB%A4%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E6%8B%A6%E6%88%AA%E8%BF%87%E6%BB%A4%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://www.twle.cn/l/yufei/gof/gof-basic-intercepting-filter-pa</description>
    </item>
    
    <item>
      <title>模板模式</title>
      <link>http://maizitoday.github.io/post/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 记录来源：《设计模式之禅》作者：秦小波 定义 定义一个操作中的算法的框架，而将一些步骤延迟到子类中。使得子类可以不改 变一个算法的结构即可重定义</description>
    </item>
    
    <item>
      <title>事件分发器模式</title>
      <link>http://maizitoday.github.io/post/%E5%88%86%E5%8F%91%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E5%88%86%E5%8F%91%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://cloud.tencent.com/developer/article/1178048 简介 在项目开发中，会遇到如</description>
    </item>
    
    <item>
      <title>发布订阅者模式</title>
      <link>http://maizitoday.github.io/post/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载： https://www.cnblogs.com/onepixel/p/10806891.html 观察者模式 观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新。观</description>
    </item>
    
    <item>
      <title>责任链模式</title>
      <link>http://maizitoday.github.io/post/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 记录来源：《设计模式之禅》作者：秦小波 定义 使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合关 系。将这些对象连成一条链，</description>
    </item>
    
    <item>
      <title>工厂模式</title>
      <link>http://maizitoday.github.io/post/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>抽象工厂模式</title>
      <link>http://maizitoday.github.io/post/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>策略模式</title>
      <link>http://maizitoday.github.io/post/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 记录来源：《设计模式之禅》作者：秦小波 概述 定义一组算法，将每个算法都封装起来，并且使它们之间可以互换。 这个定义是非常明确、清晰的，“定义一</description>
    </item>
    
    <item>
      <title>桥梁模式</title>
      <link>http://maizitoday.github.io/post/%E6%A1%A5%E6%A2%81%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E6%A1%A5%E6%A2%81%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://www.cnblogs.com/houleixx/archive/2008/02/23/1078877.html</description>
    </item>
    
    <item>
      <title>装饰模式</title>
      <link>http://maizitoday.github.io/post/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 记录来源：《设计模式之禅》作者：秦小波 概述 他其实和AOP的通知类似， 他是一个特殊的代理类。 装饰模式是继承关系的一个替代方案。 优点 装饰模式是</description>
    </item>
    
    <item>
      <title>适配器模式</title>
      <link>http://maizitoday.github.io/post/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] **记录来源：《设计模式之禅》作者：秦小波 ** 概述 如上图，可以看到， 适配器就是用来连接不同的系统或者功能模块之间的一个桥梁沟通作用。 总的来说</description>
    </item>
    
    <item>
      <title>Active-Object-设计模式</title>
      <link>http://maizitoday.github.io/post/active-object-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/active-object-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC]</description>
    </item>
    
    <item>
      <title>Count-Down-设计模式</title>
      <link>http://maizitoday.github.io/post/count-down-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/count-down-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://blog.csdn.net/weixin_40288381/article/details/87474970 概述</description>
    </item>
    
    <item>
      <title>Thread-Per-Message-设计模式</title>
      <link>http://maizitoday.github.io/post/thread-per-message-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/thread-per-message-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://blog.csdn.net/qq_33366098/article/details/89183926 概述 Thre</description>
    </item>
    
    <item>
      <title>Two-phase-Termination-设计模式</title>
      <link>http://maizitoday.github.io/post/two-phase-termination-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/two-phase-termination-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://blog.csdn.net/crazyzxljing0621/article/details/56669649 概</description>
    </item>
    
    <item>
      <title>Work-Thread-设计模式</title>
      <link>http://maizitoday.github.io/post/work-thread-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/work-thread-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载：https://blog.csdn.net/weixin_33997389/article/details/88809045 概述 Work T</description>
    </item>
    
    <item>
      <title>Future-设计模式</title>
      <link>http://maizitoday.github.io/post/future-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/future-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://www.cnblogs.com/liang1101/p/6476698.html Future模式 Future模式</description>
    </item>
    
    <item>
      <title>balking-设计模式</title>
      <link>http://maizitoday.github.io/post/balking-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/balking-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://blog.csdn.net/huangxun08/article/details/47081515 balking</description>
    </item>
    
    <item>
      <title>Guarded-Suspension-设计模式</title>
      <link>http://maizitoday.github.io/post/guarded-suspension-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/guarded-suspension-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://blog.csdn.net/weixin_42245930/article/details/88761176 Guarded Suspension</description>
    </item>
    
    <item>
      <title>immutable-设计模式</title>
      <link>http://maizitoday.github.io/post/immutable-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/immutable-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://blog.csdn.net/liuxiao723846/article/details/48438437 immutable Objects immutable O</description>
    </item>
    
    <item>
      <title>ThreadLocal-设计模式</title>
      <link>http://maizitoday.github.io/post/threadlocal-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/threadlocal-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://blog.csdn.net/pingpangkuangmo/article/details/84654393 Th</description>
    </item>
    
    <item>
      <title>各框架在并发情况下实例对象</title>
      <link>http://maizitoday.github.io/post/%E5%90%84%E6%A1%86%E6%9E%B6%E5%9C%A8%E5%B9%B6%E5%8F%91%E6%83%85%E5%86%B5%E4%B8%8B%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E5%90%84%E6%A1%86%E6%9E%B6%E5%9C%A8%E5%B9%B6%E5%8F%91%E6%83%85%E5%86%B5%E4%B8%8B%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1/</guid>
      <description>[TOC] servlet 原文链接：https://blog.csdn.net/hym740639005/article/details/81278258 因为se</description>
    </item>
    
    <item>
      <title>读写锁分离-设计模式</title>
      <link>http://maizitoday.github.io/post/%E8%AF%BB%E5%86%99%E9%94%81%E5%88%86%E7%A6%BB-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E8%AF%BB%E5%86%99%E9%94%81%E5%88%86%E7%A6%BB-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址： https://blog.csdn.net/weixin_39715061/article/details/81081008 需求简明分析 读的时候有好几个线程一起去读它 并行的去读,不会对下一个产生问题。 如果有人在写 你就不能读了 线程就会wait住 ，如果有</description>
    </item>
    
    <item>
      <title>单线程执行-设计模式</title>
      <link>http://maizitoday.github.io/post/%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 转载地址：https://blog.csdn.net/weixin_39715061/article/details/81065182 模拟</description>
    </item>
    
    <item>
      <title>代理</title>
      <link>http://maizitoday.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</guid>
      <description>[TOC] 转载地址：https://www.cnblogs.com/cenyu/p/6289209.html 代理模式 代理(Proxy)是一种设计模式</description>
    </item>
    
    <item>
      <title>观察者模式</title>
      <link>http://maizitoday.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 25 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://maizitoday.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 一下文字来源：秦小波 《设计模式之禅》，这本设计模式书是太经典。 原理 相当于把观察者写入到了被观察者的那个类中。 然后在被观察者类里面调用观察者</description>
    </item>
    
  </channel>
</rss>
